package fr.eseo.cc3.dao.implementation;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import fr.eseo.cc3.dao.DAOFactory;
import fr.eseo.cc3.dao._interface.CourDao;

import fr.eseo.cc3.dao.bean.VirtualMachine;
import fr.eseo.cc3.dao.bean.Cour;
import fr.eseo.cc3.dao.bean.Utilisateur;
import fr.eseo.cc3.dao.exception.DAOException;
import static fr.eseo.cc3.dao.DAOUtilitaire.*;

public class CourDaoImpl implements CourDao {
	private DAOFactory daoFactory;
	
    public CourDaoImpl( DAOFactory daoFactory ) {
        this.daoFactory = daoFactory;
    }
    
 private static final String SQL_SELECT_PAR_NOMUTILISATEUR = "SELECT numCours, nomCours, nbEtudiant, nbVm, serveur FROM Cours WHERE nomCours = ? AND serveur = ?";
    
    /* Implémentation de la méthode définie dans l'interface UtilisateurDao */
    @Override
    public Cour trouver(String nomCours, int serveur) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        Cour cour = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_SELECT_PAR_NOMUTILISATEUR, false, nomCours, serveur);
            resultSet = preparedStatement.executeQuery();
            /* Parcours de la ligne de données de l'éventuel ResulSet retourné */
            if ( resultSet.next() ) {
                cour = map( resultSet );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( resultSet, preparedStatement, connexion );
        }

        return cour;
    }

    private static final String SQL_SELECT_ALL = "SELECT numCours, nomCours, nbEtudiant, nbVm, serveur FROM Cours WHERE serveur = ?";
    
    @Override
    public ArrayList<Cour> lister(int serveur) throws DAOException{
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        ArrayList<Cour> cours = new ArrayList<Cour>();

        try {
            /* Récupération d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_SELECT_ALL, false, serveur);
            resultSet = preparedStatement.executeQuery();
            /* Parcours de la ligne de données de l'éventuel ResulSet retourné */
            while(resultSet.next() ) {
                cours.add(map( resultSet ));
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( resultSet, preparedStatement, connexion );
        }
        return cours;
    }
    

    @Override
    public ArrayList<Cour> getCourReferent(Utilisateur referent, int serveur) throws DAOException{
       return getCourUtilisateur(referent, serveur);
    }
    
    private static final String SQL_SELECT_COUR_BY_UTILISATEUR = "SELECT numCours, nomCours, nbEtudiant, nbVm, serveur FROM Cours WHERE numCours IN (SELECT cours FROM Assiste WHERE user = ?) AND serveur = ?";
    
    @Override
    public ArrayList<Cour> getCourUtilisateur(Utilisateur utilisateur, int serveur) throws DAOException{
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        ArrayList<Cour> cours = new ArrayList<Cour>();
        
        try {
            /* Récupération d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_SELECT_COUR_BY_UTILISATEUR, false, utilisateur.getNumUtilisateur(), serveur);
            resultSet = preparedStatement.executeQuery();
            /* Parcours de la ligne de données de l'éventuel ResulSet retourné */
            while(resultSet.next() ) {
                cours.add(map( resultSet ));
            }
        }catch(NullPointerException e) {
        	   e.printStackTrace();
           }
         catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( resultSet, preparedStatement, connexion );
        }
        return cours;
    }
    
    private static final String SQL_INSERT_COUR = "INSERT INTO Cours (nomCours, nbEtudiant, nbVm, serveur) VALUES (?, ?, ?, ?)";

    /* Implémentation de la méthode définie dans l'interface UtilisateurDao */
    @Override
    public void creer( Cour cours ) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet valeursAutoGenerees = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_INSERT_COUR, true, cours.getNomCour(), cours.getNbEtudiant(), cours.getNbVm(), cours.getServeur());
            int statut = preparedStatement.executeUpdate();
            /* Analyse du statut retourné par la requête d'insertion */
            if ( statut == 0 ) {
                throw new DAOException( "Échec de la création du cour, aucune ligne ajoutée dans la table." );
            }
            /* Récupération de l'id auto-généré par la requête d'insertion */
            valeursAutoGenerees = preparedStatement.getGeneratedKeys();
            if ( valeursAutoGenerees.next() ) {
                /* Puis initialisation de la propriété id du bean Utilisateur avec sa valeur */
                cours.setNumCour(valeursAutoGenerees.getLong(1));
            } else {
                throw new DAOException( "Échec de la création du cour en base, aucun ID auto-généré retourné." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( valeursAutoGenerees, preparedStatement, connexion );
        }
    }
    
    private static final String SQL_DELETE_COUR = "DELETE FROM Cours WHERE numCours = ?";

    /* Implémentation de la méthode définie dans l'interface UtilisateurDao */
    @Override
    public void supprimer( Cour cours ) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_DELETE_COUR, true, cours.getNumCour() );
            resultSet = preparedStatement.executeQuery();
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( resultSet, preparedStatement, connexion );
        }
    }
    
    private static final String SQL_UPDATE = "UPDATE Cours SET numCours = ?, nomCours = ?, nbEtudiant = ?, nbVm = ?, serveur = ? WHERE numCour = ?";

    /* Implémentation de la méthode définie dans l'interface UtilisateurDao */
    @Override
    public void modifier( Cour cours ) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet valeursAutoGenerees = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_UPDATE, true, cours.getNumCour(), cours.getNomCour(), cours.getNbEtudiant(), cours.getNbVm(), cours.getServeur(), cours.getNumCour() );
            int statut = preparedStatement.executeUpdate();
            /* Analyse du statut retourné par la requête d'insertion */
            if ( statut == 0 ) {
                throw new DAOException( "Échec de la mise a jour du cours, aucune ligne mise a jour dans la table." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( valeursAutoGenerees, preparedStatement, connexion );
        }
    }
    
    
    /* Implémentation de la méthode définie dans l'interface UtilisateurDao */
    @Override
    public void setReferent( Cour cours, Utilisateur referent ) throws DAOException{
       ajoutEtudiant(cours, referent);
    }
    

    /* Implémentation de la méthode définie dans l'interface UtilisateurDao */
    @Override
    public void deleteReferent( Cour cours, Utilisateur referent) throws DAOException {
        supressionEtudiant(cours, referent);
    }
    
    private static final String SQL_INSERT_ETUDIANT = "INSERT INTO Assiste (cours, user) VALUES (?, ?)";
    
    /* Implémentation de la méthode définie dans l'interface UtilisateurDao */
    @Override
    public void ajoutEtudiant( Cour cours, Utilisateur etudiant ) throws DAOException{
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet valeursAutoGenerees = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_INSERT_ETUDIANT, true, cours.getNumCour(), etudiant.getNumUtilisateur());
            int statut = preparedStatement.executeUpdate();
            /* Analyse du statut retourné par la requête d'insertion */
            if ( statut == 0 ) {
                throw new DAOException( "Échec de la créationd du referent, aucune ligne ajoutée dans la table." );
            }
            /* Récupération de l'id auto-généré par la requête d'insertion */
            valeursAutoGenerees = preparedStatement.getGeneratedKeys();
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( valeursAutoGenerees, preparedStatement, connexion );
        }
    }
    
    private static final String SQL_DELETE_ETUDIANT = "DELETE FROM Assiste WHERE cour = ? and user = ?";

    /* Implémentation de la méthode définie dans l'interface UtilisateurDao */
    @Override
    public void supressionEtudiant( Cour cours, Utilisateur etudiant) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_DELETE_ETUDIANT, true, cours.getNumCour(), etudiant.getNumUtilisateur());
            resultSet = preparedStatement.executeQuery();
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( resultSet, preparedStatement, connexion );
        }
    }
    
    private static final String SQL_SELECT_COURS_NON_INSCRIT = "SELECT c.numCours, c.nomCours, c.nbEtudiant, c.nbVm, c.serveur, u.numUtilisateur FROM Cours c LEFT OUTER JOIN Assiste a ON a.cours = c.numCours AND c.serveur = ? LEFT OUTER JOIN Utilisateur u on u.numUtilisateur = a.user AND u.numUtilisateur = ?";

    @Override
    public ArrayList<Cour> getCourUtilisateurNonInscrit(Utilisateur utilisateur, int serveur) throws DAOException {
    	Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        ArrayList<Cour> listeCours = new ArrayList<Cour>();
        
        try {
            /* Récupération d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_SELECT_COURS_NON_INSCRIT, false, serveur, utilisateur.getNumUtilisateur());
            resultSet = preparedStatement.executeQuery();
            /* Parcours de la ligne de données de l'éventuel ResulSet retourné */
            while(resultSet.next() ) {
            	Cour cours = map(resultSet);
            	cours.setInscrit(resultSet.getString("numUtilisateur")==null?false:true);
            	listeCours.add(cours);
            }
        }catch(NullPointerException e) {
        	   e.printStackTrace();
           }
         catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( resultSet, preparedStatement, connexion );
        }
        return listeCours;
    }
    
    
    private static final String SQL_INSERT_VM = "INSERT INTO VmToCour (cours, machineVirtuel) VALUES (?, ?)";
    
    /* Implémentation de la méthode définie dans l'interface UtilisateurDao */
    @Override
    public void ajoutVirtualMachine( Cour cours, VirtualMachine vm ) throws DAOException{
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet valeursAutoGenerees = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_INSERT_VM, true, cours.getNumCour(), vm.getNumVm());
            int statut = preparedStatement.executeUpdate();
            /* Analyse du statut retourné par la requête d'insertion */
            if ( statut == 0 ) {
                throw new DAOException( "Échec de la créationd du referent, aucune ligne ajoutée dans la table." );
            }
            /* Récupération de l'id auto-généré par la requête d'insertion */
            valeursAutoGenerees = preparedStatement.getGeneratedKeys();
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( valeursAutoGenerees, preparedStatement, connexion );
        }
    }
    
    
    private static final String SQL_DELETE_VM = "DELETE FROM VmToCour WHERE cours = ? and machineVirtuel = ?";

    /* Implémentation de la méthode définie dans l'interface UtilisateurDao */
    @Override
    public void supressionVirtualMachine( Cour cours, VirtualMachine vm ) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            /* Récupération d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_DELETE_VM, true, cours.getNumCour(), vm.getNumVm());
            resultSet = preparedStatement.executeQuery();
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( resultSet, preparedStatement, connexion );
        }
    }

    /*
     * Mapping d'un objet Cours que l'ont récupère après une requête sur la bdd
     */
    private static Cour map( ResultSet resultSet ) throws SQLException {
        Cour cour = new Cour(resultSet.getLong("numCours"), resultSet.getString("nomCours"), resultSet.getInt("nbEtudiant"), resultSet.getInt("nbVm"), resultSet.getInt("serveur"));
        return cour;
    }
}